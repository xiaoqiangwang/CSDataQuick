import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump CSDataQuick.Data 1.0 epicsqml-qmake/imports'

Module {
    Component {
        name: "QCSData"
        prototype: "QObject"
        exports: ["CSData 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AccessFlag"
            values: {
                "NoAccess": 0,
                "ReadAccess": 1,
                "WriteAccess": 2
            }
        }
        Enum {
            name: "FieldType"
            values: {
                "String": 0,
                "Integer": 1,
                "Short": 1,
                "Float": 2,
                "Enum": 3,
                "Char": 4,
                "Long": 5,
                "Double": 6,
                "Invalid": 7
            }
        }
        Property { name: "source"; type: "string" }
        Property { name: "host"; type: "string" }
        Property { name: "connected"; type: "bool" }
        Property { name: "fieldType"; type: "FieldType" }
        Property { name: "count"; type: "qulonglong" }
        Property { name: "value"; type: "QVariant" }
        Property { name: "accessRight"; type: "int" }
        Property { name: "alarm"; type: "QCSDataAlarm"; isPointer: true }
        Property { name: "timeStamp"; type: "QDateTime" }
        Property { name: "precision"; type: "int" }
        Property { name: "units"; type: "string" }
        Property { name: "range"; type: "QCSDataRange"; isPointer: true }
        Property { name: "stateStrings"; type: "QStringList" }
        Signal { name: "connectionChanged" }
        Method {
            name: "setHost"
            Parameter { name: "host"; type: "string" }
        }
        Method {
            name: "setConnected"
            Parameter { name: "connected"; type: "bool" }
        }
        Method {
            name: "setFieldType"
            Parameter { name: "fieldType"; type: "QCSData::FieldType" }
        }
        Method {
            name: "setCount"
            Parameter { name: "count"; type: "qulonglong" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "updateValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setAccessRight"
            Parameter { name: "accessRight"; type: "int" }
        }
        Method {
            name: "setTimeStamp"
            Parameter { name: "timeStamp"; type: "QDateTime" }
        }
        Method {
            name: "setPrecision"
            Parameter { name: "precision"; type: "int" }
        }
        Method {
            name: "setUnits"
            Parameter { name: "units"; type: "string" }
        }
        Method {
            name: "setStateStrings"
            Parameter { name: "stateStrings"; type: "QStringList" }
        }
        Method {
            name: "setAlarm"
            Parameter { name: "severity"; type: "QCSDataAlarm::Severity" }
            Parameter { name: "status"; type: "int" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "setRange"
            Parameter { name: "lower"; type: "double" }
            Parameter { name: "upper"; type: "double" }
        }
    }
    Component {
        name: "QCSDataAlarm"
        prototype: "QObject"
        exports: ["CSDataAlarm 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Severity"
            values: {
                "NoAlarm": 0,
                "MinorAlarm": 1,
                "MajorAlarm": 2,
                "InvalidAlarm": 3
            }
        }
        Property { name: "severity"; type: "Severity" }
        Property { name: "status"; type: "int" }
        Property { name: "message"; type: "string" }
        Signal { name: "alarmChanged" }
    }
    Component {
        name: "QCSDataRange"
        prototype: "QObject"
        exports: ["CSDataRange 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "lower"; type: "double" }
        Property { name: "upper"; type: "double" }
        Signal { name: "rangeChanged" }
        Method { name: "isValid"; type: "bool" }
    }
}
